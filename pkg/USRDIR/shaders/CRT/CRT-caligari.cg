/*
    Phosphor shader

    Copyright (C) 2010, 2011 caligari

   This program is free software; you can redistribute it and/or
   modify it under the terms of the GNU General Public License
   as published by the Free Software Foundation; either version 2
   of the License, or (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

*/

struct tex_coords
{
   float2 texCoord;
   float2 onex;
};

struct input
{
  float2 video_size;
  float2 texture_size;
  float2 output_size;
};

/* Default Vertex shader */
void main_vertex
(
   float4 position : POSITION,
   out float4 oPosition : POSITION,
   uniform float4x4 modelViewProj,

   float4 color : COLOR,
   out float4 oColor : COLOR,

   float2 tex : TEXCOORD,

   uniform input IN,
   out tex_coords coords
 )
{
   oPosition = mul(modelViewProj, position);
   oColor = color;

   coords = tex_coords (
      tex + float2(0.0, 0.0),
      float2(1.0 / IN.texture_size.x, 0.0)
   );
}



	// 0.5 = the spot stays inside the original pixel
	// 1.0 = the spot bleeds up to the center of next pixel
	#define SPOT_WIDTH	0.9
	#define COLOR_BOOST	1.2

	// for scanline effect, 0.5 to 0.7 in height
	#define SPOT_HEIGTH	0.7


	/*** Uncomment this to have darker pixels producing smaller spots ***/
//	#define SPOT_SIZE_IS_INFLUENCED_BY_LUMI


	/*** Different way to handle rgb phosphors ***/
//	#define RGB_BAR
//	#define RGB_TRIAD
//	#define MG_BAR

/*** change this to handle gamma correction ***/
	#define InputGamma 2.4
	#define OutputGamma 2.2

/** with Gamma correction **/
//	#define GAMMA_IN(color)		pow(color, InputGamma )
//	#define GAMMA_OUT(color)	pow(color, 1.0 / OutputGamma )
/*********************************/

/** with Fake Gamma correction **/
	/*********************************
	Approximations:
		for 1<g<2 : x^g ~ ax + bx^2		where	a=6/(g+1)-2	 and b=1-a
		for 2<g<3 : x^g ~ ax^2 + bx^3	where	a=12/(g+1)-3 and b=1-a

		for 1<g<2 : x^(1/g) ~ (sqrt(a^2+4bx)-a)		where	a=6/(g+1)-2	 and b=1-a
		for 2<g<3 : Not computed yet, probably needs cube_root... so no better than using pow ?
	**********************************/
	float4 A_IN = float4( 12.0/(InputGamma+1.0)-3.0 );
	float4 B_IN = float4(1.0) - float4( 12.0/(InputGamma+1.0)-3.0 );	
	#define GAMMA_IN(color)		( (A_IN + B_IN * color) * color * color )
	#define GAMMA_OUT(color)	pow(color, 1.0 / OutputGamma )
/*********************************/

/** with Faker Gamma correction **/
//	float4 A_IN = float4( 6.0/( InputGamma/OutputGamma + 1.0 ) - 2.0 );
//	float4 B_IN = float4(1.0) - A_IN;
//	#define GAMMA_IN(color)		( (A_IN + B_IN * color) * color )
//	#define GAMMA_OUT(color)	color
/***************************************/
	
/** without Gamma correction **/
//	#define GAMMA_IN(color) color
//	#define GAMMA_OUT(color) color
/*********************************/
	
    
    #define TEX2D(coords)	GAMMA_IN( tex2D(s_p, coords) )
    
#ifdef SPOT_SIZE_IS_INFLUENCED_BY_LUMI
	float lumi;
	float size;
	float4 lumW = float4( 0.3, 0.6, 0.1, 0.0 );
	
	// in this case, the size decrease for darker pixels		  /** the last parenthesis needs work... **/
    #define SIZE(col) lumi = dot(col, lumW); size = SPOT_WIDTH * ( 0.5 + 0.5 * lumi);
#else
	float size = SPOT_WIDTH;
	// in this case, the size is fixed => the macro does nothing
	#define SIZE(col)
#endif SPOT_SIZE_IS_INFLUENCED_BY_LUMI
	
//	float2 onex = float2( 1.0/rubyTextureSize.x, 0.0 );





float4 main_fragment(in tex_coords co, uniform input IN, uniform sampler2D s_p : TEXUNIT0) : COLOR
{
		float2 coords = ( co.texCoord * IN.texture_size );
		float2 pixel_center = floor( coords ) + float2(0.5);
		float2 texture_coords = pixel_center / IN.texture_size;
		
		float4 color = TEX2D( texture_coords );
		
		float dx = coords.x - pixel_center.x;
		
		// macro to determinate spot size
		// can be fixed or influenced by the pixel luminosity
		SIZE( color );
		
		float weight = dx / size;
		if (weight>1.0)	weight = 1.0;
		weight = 1.0 - weight * weight;
		
		color *= float4( weight * weight * COLOR_BOOST );

		// get closest neighbour to blend
		float4 colorNB;
		if (dx>0)
		{
			colorNB = TEX2D( texture_coords + co.onex );
			dx = 1.0 - dx;
		}
		else
		{
			colorNB = TEX2D( texture_coords - co.onex );	
			dx = 1.0 + dx;
		}
		
		// macro to determinate spot size
		// can be fixed or influenced by the pixel luminosity
		SIZE( colorNB );
		
		weight = dx / size;
		if (weight>1.0)	weight = 1.0;
		weight = 1.0 - weight * weight;

		color = color + colorNB * float4(weight * weight  * COLOR_BOOST  );
		
		// scanline
		float dy = coords.y - pixel_center.y;
		weight = dy / SPOT_HEIGTH;
		weight = 1.0 - weight * weight;
		color *= float4(weight * weight);

#ifdef RGB_BAR
		float2 output_coords = floor( co.texCoord * IN.output_size );

		float modulo = fmod(output_coords.x,3.0);
		if ( modulo == 0.0 )
			color = color * float4(1.4,0.5,0.5,0.0);
		else if ( modulo == 1.0 )
			color = color * float4(0.5,1.4,0.5,0.0);
		else
			color = color * float4(0.5,0.5,1.4,0.0);
#endif
			
#ifdef RGB_TRIAD
		float2 output_coords = floor( co.texCoord * IN.output_size );
	
		
		float modulo = fmod(output_coords.x,2.0);
			
		if ( modulo == 0.0 )
			modulo = fmod( output_coords.y,6.0);
		else
			modulo = fmod(output_coords.y + 3.0, 6.0);
			
		if ( modulo < 2.0 )
			color = color * float4(1.0,0.0,0.0,0.0);
		else if ( modulo < 4.0 )
			color = color * float4(0.0,1.0,0.0,0.0);
		else
			color = color * float4(0.0,0.0,1.0,0.0);
#endif
			
#ifdef MG_BAR
		float2 output_coords = floor( co.texCoord * IN.output_size);
			
		float modulo = fmod(output_coords.x,2.0);
		if ( modulo == 0.0 )
			color = color * float4(1.0,0.1,1.0,0.0);
		else
			color = color * float4(0.1,1.0,0.1,0.0);
#endif

	return clamp( GAMMA_OUT(color), 0.0, 1.0 );
}
