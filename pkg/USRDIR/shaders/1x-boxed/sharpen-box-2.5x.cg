const float box_scale = 2.5; // 2.5x scale.

struct input
{
	half2 video_size;
	half2 texture_size;
	half2 output_size;
};


struct out_vertex {
	half4 position : POSITION;
	half4 color    : COLOR;
	half2 texCoord : TEXCOORD0;
	half4 t1 : TEXCOORD1;
	half4 t2 : TEXCOORD2;
	half4 t3 : TEXCOORD3;
	half4 t4 : TEXCOORD4;
};

/*    VERTEX_SHADER    */
out_vertex main_vertex
(
	half4 position	: POSITION,
	half4 color	: COLOR,
	half2 tex      : TEXCOORD0,

   	uniform half4x4 modelViewProj,
	uniform input IN
)

{
	half2 scale  = (IN.output_size / IN.video_size) / box_scale;
	half2 middle = 0.5 * IN.video_size / IN.texture_size;
	half2 diff   = tex.xy - middle;
	half2 oTex   = middle + diff * scale;

	half2 ps = half2(1.0/IN.texture_size.x, 1.0/IN.texture_size.y);
	half dx  = ps.x;
	half dy  = ps.y;

	out_vertex OUT = { 
		mul(modelViewProj, position),
		color,
		oTex,
		half4(oTex, oTex) + half4( dx,  dy, 0.0,  dy),
		half4(oTex, oTex) + half4(-dx,  dy, -dx, 0.0),
		half4(oTex, oTex) + half4(-dx, -dy, 0.0, -dy),
		half4(oTex, oTex) + half4( dx, -dy,  dx, 0.0),
	};

	return OUT;
}


half4 main_fragment(in out_vertex VAR, uniform sampler2D s0 : TEXUNIT0, uniform input IN) : COLOR
{
   half4 Color;
   half Sharpenfactor = 0.1; // range from 0.0 to 1.0

   half4 center = tex2D( s0, VAR.texCoord);

   Color = 8.0 * center;
   Color -= tex2D( s0, VAR.t1.xy);
   Color -= tex2D( s0, VAR.t1.zw);
   Color -= tex2D( s0, VAR.t2.xy);
   Color -= tex2D( s0, VAR.t2.zw);
   Color -= tex2D( s0, VAR.t3.xy);
   Color -= tex2D( s0, VAR.t3.zw);
   Color -= tex2D( s0, VAR.t4.xy);
   Color -= tex2D( s0, VAR.t4.zw);

   Color = Color * Sharpenfactor + center;

   Color.a = 1.0;

   return Color;
}
